// ==UserScript==
// @name         Blum AutoClicker
// @version      1.0
// @description  AutoClicker and Autofarm for Blum
// @match        https://telegram.blum.codes/*
// @grant        none
// @icon         https://raw.githubusercontent.com/oliver134/Blum/main/blum.jpeg
// @downloadURL  https://github.com/oliver134/Blum/raw/main/blum-autoclicker.en.user.js
// @updateURL    https://github.com/oliver134/Blum/raw/main/blum-autoclicker.en.user.js
// @author       Emin M @emin.mir
// @homepage     https://t.me/crypto_world_aze
// ==/UserScript==
 let GAME_SETTINGS = { clickPercentage: 75, minIceHits: 5, minDelayMs: 2000, maxDelayMs: 5000, }; let isGamePaused = true; try { let gameStats = { score: 0, bombHits: 0, iceHits: 0, flowersClicked: 0, flowersSkipped: 0, bombsClicked: 0, bombsSkipped: 0, isGameOver: false, }; const originalPush = Array.prototype.push; Array.prototype.push = function (...items) { if (!isGamePaused) { items.forEach(item => handleGameElement(item)); } return originalPush.apply(this, items); }; function handleGameElement(element) { if (!element || !element.item) return; const { type } = element.item; switch (type) { case "CLOVER": processFlower(element); break; case "BOMB": processBomb(element); break; case "FREEZE": processIce(element); break; } } function processFlower(element) { if (!isGamePaused) { const shouldClick = Math.random() < (GAME_SETTINGS.clickPercentage / 100); if (shouldClick) { gameStats.score++; gameStats.flowersClicked++; clickElement(element); } else { gameStats.flowersSkipped++; } } }function processBomb(element) { if (!isGamePaused) { const shouldClick = Math.random() < (GAME_SETTINGS.clickPercentage / 100); if (shouldClick) { gameStats.score = 0; gameStats.bombsClicked++; clickElement(element); } else { gameStats.bombsSkipped++; } } } function processIce(element) { if (gameStats.iceHits < GAME_SETTINGS.minIceHits) { clickElement(element); gameStats.iceHits++; } } function clickElement(element) { element.onClick(element); element.isExplosion = true; element.addedAt = performance.now(); } function checkGameCompletionAndNavigateHome() { const rewardElement = document.querySelector('#app > div > div > div.content > div.reward'); if (rewardElement && !gameStats.isGameOver) { gameStats.isGameOver = true; const claimButton = rewardElement.querySelector('button'); if (claimButton) { claimButton.click(); } setTimeout(() => { navigateToHomePage(); resetGameStats(); resetGameSettings(); setTimeout(checkAndClickPlayButton, 5000); }, 5000); } } function navigateToHomePage() { window.location.href = 'https://telegram.blum.codes/'; } function continuousGameCompletionCheck() { checkGameCompletionAndNavigateHome(); setTimeout(continuousGameCompletionCheck, 1000); } continuousGameCompletionCheck(); function resetGameSettings() { GAME_SETTINGS.clickPercentage = 75; GAME_SETTINGS.minIceHits = 5; } function getRandomDelay() { return Math.random() * (GAME_SETTINGS.maxDelayMs - GAME_SETTINGS.minDelayMs) + GAME_SETTINGS.minDelayMs; } function getNewGameDelay() { return Math.floor(Math.random() * (3000 - 1000 + 1) + 1000); } function checkAndClickClaimButton() { if (!isGamePaused) { const claimButton = document.querySelector('button.kit-button.is-large.is-drop.is-fill.button.is-done'); if (claimButton && claimButton.textContent.includes('Claim')) { setTimeout(() => { claimButton.click(); gameStats.isGameOver = false; setTimeout(checkAndClickStartFarmingButton, getNewGameDelay()); }, getNewGameDelay()); } } } function checkAndClickStartFarmingButton() { if (!isGamePaused) { const startFarmingButton = document.querySelector('button.kit-button.is-large.is-primary.is-fill.button'); if (startFarmingButton && startFarmingButton.textContent.includes('Start farming')) { setTimeout(() => { startFarmingButton.click(); gameStats.isGameOver = false; setTimeout(checkAndClickPlayButton, getNewGameDelay()); }, getNewGameDelay()); } } } function checkAndClickPlayButton() { if (!isGamePaused) { const playButton = document.querySelector('a.play-btn[href="/game"]'); if (playButton) { setTimeout(() => { playButton.click(); gameStats.isGameOver = false; }, getNewGameDelay()); } } } function continuousClaimButtonCheck() { checkAndClickClaimButton(); setTimeout(continuousClaimButtonCheck, 1000); } function continuousStartFarmingCheck() { checkAndClickStartFarmingButton(); setTimeout(continuousStartFarmingCheck, 1000); } function continuousPlayButtonCheck() { checkAndClickPlayButton(); setTimeout(continuousPlayButtonCheck, 1000); } continuousClaimButtonCheck(); continuousStartFarmingCheck(); continuousPlayButtonCheck(); const controlsContainer = document.createElement('div'); controlsContainer.style.position = 'fixed'; controlsContainer.style.top = '0'; controlsContainer.style.left = '50%'; controlsContainer.style.transform = 'translateX(-50%)'; controlsContainer.style.zIndex = '9999'; controlsContainer.style.backgroundColor = 'rgba(0, 0, 0, 0.8)'; controlsContainer.style.padding = '3px 12px'; controlsContainer.style.borderRadius = '10px'; controlsContainer.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)'; controlsContainer.style.fontFamily = 'Arial, sans-serif'; controlsContainer.style.border = '1px solid black'; document.body.appendChild(controlsContainer); const infoContainer = document.createElement('div'); infoContainer.style.display = 'inline-block'; infoContainer.style.marginRight = '10px'; const infoText = document.createElement('a'); infoText.href = atob('aHR0cHM6Ly90Lm1lL2NyeXB0b193b3JsZF9hemU='); infoText.innerHTML = atob('Rm9yIG1vcmUgaW5mbyBjbGljayBoZXJlOg=='); infoText.style.color = 'white'; infoText.style.fontWeight = 'bold'; infoText.style.fontSize = '9px'; infoText.style.marginBottom = '5px'; infoText.style.alignItems = 'center'; infoText.style.textDecoration = 'none'; const telegramImage = document.createElement('img'); telegramImage.src = 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/telegram/telegram.png'; telegramImage.style.width = '15px'; telegramImage.style.height = '15px'; telegramImage.style.marginRight = '5px'; telegramImage.addEventListener('click', function() { window.location.href = atob('aHR0cHM6Ly90Lm1lL2NyeXB0b193b3JsZF9hemU='); }); const telegramLink = document.createElement('a'); telegramLink.href = atob('aHR0cHM6Ly90Lm1lL2NyeXB0b193b3JsZF9hemU='); telegramLink.innerHTML = atob('Q3J5cHRvIFdvcmxkCg=='); telegramLink.style.color = 'white'; telegramLink.style.fontWeight = 'bold'; telegramLink.style.fontSize = '14px'; telegramLink.style.textDecoration = 'none'; const telegramContainer = document.createElement('div'); telegramContainer.style.display = 'flex'; telegramContainer.style.alignItems = 'center'; telegramContainer.appendChild(telegramImage); telegramContainer.appendChild(telegramLink); infoContainer.appendChild(infoText); infoContainer.appendChild(telegramContainer); controlsContainer.appendChild(infoContainer); const pauseButton = document.createElement('button'); pauseButton.textContent = 'Start'; pauseButton.style.position = 'fixed'; pauseButton.style.bottom = '20px'; pauseButton.style.right = '20px'; pauseButton.style.zIndex = '9999'; pauseButton.style.padding = '4px 8px'; pauseButton.style.backgroundColor = '#8B0000'; pauseButton.style.color = 'white'; pauseButton.style.border = 'none'; pauseButton.style.borderRadius = '10px'; pauseButton.style.cursor = 'pointer'; pauseButton.onclick = toggleGamePause; document.body.appendChild(pauseButton); const settingsButton = document.createElement('button'); settingsButton.textContent = 'Settings'; settingsButton.style.position = 'fixed'; settingsButton.style.bottom = '60px'; settingsButton.style.right = '20px'; settingsButton.style.zIndex = '9999'; settingsButton.style.padding = '4px 8px'; settingsButton.style.backgroundColor = '#4CAF50'; settingsButton.style.color = 'white'; settingsButton.style.border = 'none'; settingsButton.style.borderRadius = '10px'; settingsButton.style.cursor = 'pointer'; settingsButton.onclick = openSettingsModal; document.body.appendChild(settingsButton); const resetButton = document.createElement('button'); resetButton.textContent = 'Reset'; resetButton.style.position = 'fixed'; resetButton.style.bottom = '100px'; resetButton.style.right = '20px'; resetButton.style.zIndex = '9999'; resetButton.style.padding = '4px 8px'; resetButton.style.backgroundColor = '#FF8C00'; resetButton.style.color = 'white'; resetButton.style.border = 'none'; resetButton.style.borderRadius = '10px'; resetButton.style.cursor = 'pointer'; resetButton.onclick = resetSettings; document.body.appendChild(resetButton); function openSettingsModal() { const existingModal = document.querySelector('.settings-modal'); if (existingModal) { document.body.removeChild(existingModal); return; } const modal = document.createElement('div'); modal.classList.add('settings-modal'); modal.style.position = 'fixed'; modal.style.top = '50%'; modal.style.left = '50%'; modal.style.transform = 'translate(-50%, -50%)'; modal.style.zIndex = '10000'; modal.style.padding = '20px'; modal.style.border = '1px solid black'; modal.style.borderRadius = '10px'; modal.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)'; modal.style.fontSize = '14px'; modal.style.fontFamily = 'Arial, sans-serif'; modal.style.backgroundColor = 'rgba(0, 0, 0, 0.8)'; const clickPercentageInput = createSettingInput('Click Percentage (%)', GAME_SETTINGS.clickPercentage, 0, 100); const minIceHitsInput = createSettingInput('Min. Ice Hits', GAME_SETTINGS.minIceHits, 0, 10); const minDelayMsInput = createSettingInput('Min. Delay (ms)', GAME_SETTINGS.minDelayMs); const maxDelayMsInput = createSettingInput('Max. Delay (ms)', GAME_SETTINGS.maxDelayMs); const saveButton = document.createElement('button'); saveButton.textContent = 'Save'; saveButton.style.marginTop = '10px'; saveButton.style.padding = '6px 12px'; saveButton.style.backgroundColor = '#4CAF50'; saveButton.style.color = 'White'; saveButton.style.border = 'none'; saveButton.style.borderRadius = '5px'; saveButton.style.cursor = 'pointer'; saveButton.onclick = () => { GAME_SETTINGS.clickPercentage = parseInt(clickPercentageInput.input.value); GAME_SETTINGS.minIceHits = parseInt(minIceHitsInput.input.value); GAME_SETTINGS.minDelayMs = parseInt(minDelayMsInput.input.value); GAME_SETTINGS.maxDelayMs = parseInt(maxDelayMsInput.input.value); saveSettings(); document.body.removeChild(modal); }; modal.appendChild(clickPercentageInput.container); modal.appendChild(minIceHitsInput.container); modal.appendChild(minDelayMsInput.container); modal.appendChild(maxDelayMsInput.container); modal.appendChild(saveButton); document.body.appendChild(modal); } function createSettingInput(labelText, defaultValue, min = null, max = null) { const container = document.createElement('div'); container.style.marginBottom = '10px'; const label = document.createElement('label'); label.textContent = labelText; label.style.display = 'block'; label.style.marginBottom = '5px'; label.style.fontSize = '14px'; const input = document.createElement('input'); input.type = 'number'; input.value = defaultValue; input.style.width = '100%'; input.style.padding = '8px'; input.style.boxSizing = 'border-box'; input.style.fontSize = '14px'; input.style.border = '1px solid #ccc'; input.style.borderRadius = '5px'; if (min !== null) { input.min = min; } if (max !== null) { input.max = max; } container.appendChild(label); container.appendChild(input); return { container, input }; } function saveSettings() { localStorage.setItem('blumGameSettings', JSON.stringify(GAME_SETTINGS)); } function loadSettings() { const savedSettings = localStorage.getItem('blumGameSettings'); if (savedSettings) { try { const settings = JSON.parse(savedSettings); GAME_SETTINGS = { ...GAME_SETTINGS, ...settings }; } catch (error) { console.error('Error loading settings:', error); } } } function resetSettings() { GAME_SETTINGS.clickPercentage = 75; GAME_SETTINGS.minIceHits = 5; saveSettings(); updateSettingsInputs(); } function updateSettingsInputs() { const clickPercentageInput = document.querySelector('#clickPercentageInput'); const minIceHitsInput = document.querySelector('#minIceHitsInput'); const minDelayMsInput = document.querySelector('#minDelayMsInput'); const maxDelayMsInput = document.querySelector('#maxDelayMsInput'); if (clickPercentageInput) clickPercentageInput.value = GAME_SETTINGS.clickPercentage; if (minIceHitsInput) minIceHitsInput.value = GAME_SETTINGS.minIceHits; if (minDelayMsInput) minDelayMsInput.value = GAME_SETTINGS.minDelayMs; if (maxDelayMsInput) maxDelayMsInput.value = GAME_SETTINGS.maxDelayMs; } loadSettings(); updateSettingsInputs(); function toggleGamePause() { isGamePaused = !isGamePaused; pauseButton.textContent = isGamePaused ? 'Start' : 'Pause'; } } catch (e) { console.error('Error in Blum Autoclicker script:', e); }
