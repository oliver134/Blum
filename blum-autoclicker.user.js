// ==UserScript==
// @name         Blum
// @version      1.0
// @description  AutoClicker and Autofarm for Blum
// @match        https://telegram.blum.codes/*
// @grant        none
// @icon         https://raw.githubusercontent.com/oliver134/Blum/main/blum.jpeg
// @downloadURL  https://github.com/oliver134/Blum/raw/main/blum-autoclicker.user.js
// @updateURL    https://github.com/oliver134/Blum/raw/main/blum-autoclicker.user.js
// @author       Emin M @emin.mir
// @homepage     https://t.me/crypto_world_aze
// ==/UserScript==
let GAME_SETTINGS = { clickPercentage: 75, minIceHits: 5, minDelayMs: 2000, maxDelayMs: 5000 }; let isGamePaused = true; try { let gameStats = { score: 0, bombHits: 0, iceHits: 0, flowersClicked: 0, flowersSkipped: 0, bombsClicked: 0, bombsSkipped: 0, isGameOver: false }; const originalPush = Array.prototype.push; Array.prototype.push = function(...items) { if (!isGamePaused) items.forEach(item => handleGameElement(item)); return originalPush.apply(this, items); }; function handleGameElement(element) { if (!element || !element.item) return; const { type } = element.item; switch (type) { case "CLOVER": processFlower(element); break; case "BOMB": processBomb(element); break; case "FREEZE": processIce(element); break; } } function processFlower(element) { if (!isGamePaused) { const shouldClick = Math.random() < (GAME_SETTINGS.clickPercentage / 100); if (shouldClick) { gameStats.score++; gameStats.flowersClicked++; clickElement(element); } else gameStats.flowersSkipped++; } } function processBomb(element) { if (!isGamePaused) { const shouldClick = Math.random() < (GAME_SETTINGS.clickPercentage / 100); if (shouldClick) { gameStats.score = 0; gameStats.bombsClicked++; clickElement(element); } else gameStats.bombsSkipped++; } } function processIce(element) { if (gameStats.iceHits < GAME_SETTINGS.minIceHits) { clickElement(element); gameStats.iceHits++; } } function clickElement(element) { element.onClick(element); element.isExplosion = true; element.addedAt = performance.now(); } function checkGameCompletionAndNavigateHome() { const rewardElement = document.querySelector('#app > div > div > div.content > div.reward'); if (rewardElement && !gameStats.isGameOver) { gameStats.isGameOver = true; const claimButton = rewardElement.querySelector('button'); if (claimButton) { claimButton.click(); setTimeout(() => { navigateToHomePage(); resetGameStats(); resetGameSettings(); setTimeout(checkAndClickPlayButton, 5000); }, 5000); } } } function navigateToHomePage() { window.location.href = 'https://telegram.blum.codes/'; } function continuousGameCompletionCheck() { checkGameCompletionAndNavigateHome(); setTimeout(continuousGameCompletionCheck, 1000); } continuousGameCompletionCheck(); function resetGameSettings() { GAME_SETTINGS.clickPercentage = 75; GAME_SETTINGS.minIceHits = 5; } function getRandomDelay() { return Math.random() * (GAME_SETTINGS.maxDelayMs - GAME_SETTINGS.minDelayMs) + GAME_SETTINGS.minDelayMs; } function getNewGameDelay() { return Math.floor(Math.random() * (3000 - 1000 + 1) + 1000); } function checkAndClickClaimButton() { if (!isGamePaused) { const claimButton = document.querySelector('button.kit-button.is-large.is-drop.is-fill.button.is-done'); if (claimButton && claimButton.textContent.includes('Claim')) { setTimeout(() => { claimButton.click(); gameStats.isGameOver = false; setTimeout(checkAndClickStartFarmingButton, getNewGameDelay()); }, getNewGameDelay()); } } } function checkAndClickStartFarmingButton() { if (!isGamePaused) { const startFarmingButton = document.querySelector('button.kit-button.is-large.is-primary.is-fill.button'); if (startFarmingButton && startFarmingButton.textContent.includes('Start farming')) { setTimeout(() => { startFarmingButton.click(); gameStats.isGameOver = false; setTimeout(checkAndClickPlayButton, getNewGameDelay()); }, getNewGameDelay()); } } } function checkAndClickPlayButton() { if (!isGamePaused) { const playButton = document.querySelector('a.play-btn[href="/game"]'); if (playButton) { setTimeout(() => { playButton.click(); gameStats.isGameOver = false; }, getNewGameDelay()); } } } function continuousClaimButtonCheck() { checkAndClickClaimButton(); setTimeout(continuousClaimButtonCheck, 1000); } function continuousStartFarmingCheck() { checkAndClickStartFarmingButton(); setTimeout(continuousStartFarmingCheck, 1000); } function continuousPlayButtonCheck() { checkAndClickPlayButton(); setTimeout(continuousPlayButtonCheck, 1000); } continuousClaimButtonCheck(); continuousStartFarmingCheck(); continuousPlayButtonCheck(); const controlsContainer = document.createElement('div'); controlsContainer.style.position = 'fixed'; controlsContainer.style.top = '0'; controlsContainer.style.left = '50%'; controlsContainer.style.transform = 'translateX(-50%)'; controlsContainer.style.zIndex = '9999'; controlsContainer.style.backgroundColor = '#2c2c2c'; controlsContainer.style.opacity = '0.6'; controlsContainer.style.padding = '3px 12px'; controlsContainer.style.borderRadius = '10px'; controlsContainer.style.boxShadow = '0px 4px 15px rgba(0, 0, 0, 0.5)'; document.body.appendChild(controlsContainer); const infoContainer = document.createElement('div'); infoContainer.style.display = 'inline-block'; infoContainer.style.marginRight = '10px'; const infoText = document.createElement('a'); infoText.href = atob('aHR0cHM6Ly90Lm1lL2NyeXB0b193b3JsZF9hemU='); infoText.innerHTML = atob('Rm9yIG1vcmUgaW5mbyBjbGljayBoZXJlOg=='); infoText.style.color = 'snow'; infoText.style.fontWeight = 'bold'; infoText.style.fontSize = '9px'; infoText.style.marginBottom = '5px'; infoText.style.alignItems = 'center'; infoText.style.textDecoration = 'none'; const telegramImage = document.createElement('img'); telegramImage.src = 'https://raw.githubusercontent.com/github/explore/80688e429a7d4ef2fca1e82350fe8e3517d3494d/topics/telegram/telegram.png'; telegramImage.style.width = '15px'; telegramImage.style.height = '15px'; telegramImage.style.marginRight = '5px'; telegramImage.addEventListener('click', function() { window.location.href = atob('aHR0cHM6Ly90Lm1lL2NyeXB0b193b3JsZF9hemU='); }); const telegramLink = document.createElement('a'); telegramLink.href = atob('aHR0cHM6Ly90Lm1lL2NyeXB0b193b3JsZF9hemU='); telegramLink.innerHTML = atob('Q3J5cHRvIFdvcmxkCg=='); telegramLink.style.color = 'white'; telegramLink.style.fontWeight = 'bold'; telegramLink.style.fontSize = '14px'; telegramLink.style.textDecoration = 'none'; const telegramContainer = document.createElement('div'); telegramContainer.style.display = 'flex'; telegramContainer.style.alignItems = 'center'; telegramContainer.appendChild(telegramImage); telegramContainer.appendChild(telegramLink); infoContainer.appendChild(infoText); infoContainer.appendChild(telegramContainer); controlsContainer.appendChild(infoContainer); const pauseButton = document.createElement('button'); pauseButton.textContent = 'Start'; pauseButton.style.position = 'fixed'; pauseButton.style.bottom = '20px'; pauseButton.style.right = '20px'; pauseButton.style.zIndex = '9999'; pauseButton.style.padding = '4px 8px'; pauseButton.style.backgroundColor = '#8B0000'; pauseButton.style.color = 'white'; pauseButton.style.border = 'none'; pauseButton.style.borderRadius = '10px'; pauseButton.style.cursor = 'pointer'; pauseButton.onclick = toggleGamePause; document.body.appendChild(pauseButton); const settingsButton = document.createElement('button'); settingsButton.textContent = 'Settings'; settingsButton.style.position = 'fixed'; settingsButton.style.bottom = '70px'; settingsButton.style.right = '20px'; settingsButton.style.zIndex = '9999'; settingsButton.style.padding = '4px 8px'; settingsButton.style.backgroundColor = '#008B8B'; settingsButton.style.color = 'white'; settingsButton.style.border = 'none'; settingsButton.style.borderRadius = '10px'; settingsButton.style.cursor = 'pointer'; settingsButton.onclick = openSettingsModal; document.body.appendChild(settingsButton); const settingsModal = document.createElement('div'); settingsModal.style.display = 'none'; settingsModal.style.position = 'fixed'; settingsModal.style.top = '50%'; settingsModal.style.left = '50%'; settingsModal.style.transform = 'translate(-50%, -50%)'; settingsModal.style.backgroundColor = 'rgba(0, 0, 0, 0.8)'; settingsModal.style.color = 'white'; settingsModal.style.padding = '20px'; settingsModal.style.borderRadius = '10px'; settingsModal.style.zIndex = '10000'; const settingsTitle = document.createElement('h2'); settingsTitle.textContent = 'Game Settings'; settingsTitle.style.marginBottom = '10px'; settingsTitle.style.textAlign = 'center'; settingsModal.appendChild(settingsTitle); const settingsForm = document.createElement('form'); settingsForm.style.display = 'flex'; settingsForm.style.flexDirection = 'column'; settingsForm.style.alignItems = 'center'; const clickPercentageLabel = document.createElement('label'); clickPercentageLabel.textContent = 'Click Percentage (0-100%): '; clickPercentageLabel.style.marginBottom = '5px'; settingsForm.appendChild(clickPercentageLabel); const clickPercentageInput = document.createElement('input'); clickPercentageInput.type = 'number'; clickPercentageInput.min = '0'; clickPercentageInput.max = '100'; clickPercentageInput.step = '1'; clickPercentageInput.value = GAME_SETTINGS.clickPercentage.toString(); clickPercentageInput.style.marginBottom = '10px'; settingsForm.appendChild(clickPercentageInput); const minIceHitsLabel = document.createElement('label'); minIceHitsLabel.textContent = 'Minimum Ice Hits: '; minIceHitsLabel.style.marginBottom = '5px'; settingsForm.appendChild(minIceHitsLabel); const minIceHitsInput = document.createElement('input'); minIceHitsInput.type = 'number'; minIceHitsInput.min = '0'; minIceHitsInput.max = '10'; minIceHitsInput.step = '1'; minIceHitsInput.value = GAME_SETTINGS.minIceHits.toString(); minIceHitsInput.style.marginBottom = '10px'; settingsForm.appendChild(minIceHitsInput); const saveButton = document.createElement('button'); saveButton.textContent = 'Save'; saveButton.style.backgroundColor = '#008B8B'; saveButton.style.color = 'white'; saveButton.style.padding = '5px 10px'; saveButton.style.border = 'none'; saveButton.style.borderRadius = '5px'; saveButton.style.cursor = 'pointer'; saveButton.style.marginTop = '10px'; saveButton.onclick = saveSettings; settingsForm.appendChild(saveButton); settingsModal.appendChild(settingsForm); document.body.appendChild(settingsModal); function openSettingsModal() { settingsModal.style.display = 'block'; } function saveSettings() { GAME_SETTINGS.clickPercentage = parseInt(clickPercentageInput.value); GAME_SETTINGS.minIceHits = parseInt(minIceHitsInput.value); settingsModal.style.display = 'none'; } function toggleGamePause() { isGamePaused = !isGamePaused; pauseButton.textContent = isGamePaused ? 'Start' : 'Pause'; } function resetGameStats() { gameStats = { score: 0, bombHits: 0, iceHits: 0, flowersClicked: 0, flowersSkipped: 0, bombsClicked: 0, bombsSkipped: 0, isGameOver: false }; } } catch (e) { console.error('Error in Blum Autoclicker script:', e); }
